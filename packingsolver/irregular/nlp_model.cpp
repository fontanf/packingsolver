/**
 * This file was generated by bin2cpp v3.0.0
 * Copyright (C) 2013-2021 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'nlp_model.mod', last modified 1678639729.
 * Do not modify this file.
 */
#if defined(_WIN32) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif
#include "nlp_model.hpp"
#include <string> //for std::string
#include <iostream>
#include <fstream>  //for ofstream
namespace packingsolver
{
  class NlpModelFile : public virtual packingsolver::File
  {
  public:
    NlpModelFile() { build(); }
    virtual ~NlpModelFile() {}
    virtual size_t getSize() const { return 891; }
    virtual const char * getFileName() const { return "nlp_model.mod"; }
    virtual const char * getFilePath() const { return getFileName(); }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("# Heigh of the container.\nparam hi;\n\n# Number of circles.\nparam nc;\n# Set of circles.\nset CIRCLES = 1..nc;\n# Radius of the circles.\nparam rc {CIRCLES};\n# x-coordinates of the center of the circles.\nva", 200);
      mBuffer.append("r XC {CIRCLES};\n# y-coordinates of the center of the circles.\nvar YC {CIRCLES};\n\nvar X_Max;\n\nminimize Objective: X_Max;\n\nsubject to Link_X_Max_XC {j in CIRCLES}:\n    X_Max >= XC[j] + rc[j];\n\n# Each pa", 200);
      mBuffer.append("ir of circle must not intersect.\nsubject to circle_circle_intersections {j1 in CIRCLES, j2 in CIRCLES: j1 < j2}:\n    (XC[j2] - XC[j1])^2 + (YC[j2] - YC[j1])^2 >= (rc[j1] + rc[j2])^2;\n\n# Each circle mu", 200);
      mBuffer.append("st be inside the container.\nsubject to circle_container_intersections_bottom {j in CIRCLES}:\n    YC[j] - rc[j] >= 0;\nsubject to circle_container_intersections_top {j in CIRCLES}:\n    YC[j] + rc[j] <= ", 200);
      mBuffer.append("hi;\nsubject to circle_container_intersections_left {j in CIRCLES}:\n    XC[j] - rc[j] >= 0;\n", 91);
    }
    virtual bool save(const char * filename) const
    {
      std::ofstream f(filename, std::ios::out | std::ios::binary | std::ios::trunc);
      if (f.fail()) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      f.write(buffer, fileSize);
      f.close();
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getNlpModelFile() { static NlpModelFile _instance; return _instance; }
}; //packingsolver
